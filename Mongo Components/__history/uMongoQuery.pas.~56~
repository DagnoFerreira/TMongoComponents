unit uMongoQuery;

interface

uses
  System.SysUtils, System.Classes, mongoWire, bsonDoc, bsonUtils, FMX.Forms,
  uEditMongo, uMongoDocument, System.Generics.Collections, FMX.Layouts, uConexaoMongo,
  FMX.ListBox, uMongo_Tipificacoes;

type
  TMongoQuery = class(TComponent)
    private
      FMongoConexao : TMongoConexao;
      FAtivar : Boolean;
      FCollection : String;
      procedure setAtivar(const Value: boolean);
      procedure preencherMongoDoc(Layout : TLayout; var MongoDoc : TMongoDocument);
    public
       FMongoWireQuery : TMongoWireQuery;
       constructor Create(AOwner: TComponent); override;
       function InserirLayout(Layout : TLayout) : Boolean;
       function UpdateLayout(Layout : TLayout) : Boolean;
    published
      property MongoConexao : TMongoConexao read FMongoConexao write FMongoConexao;
      property Ativar : Boolean read FAtivar write setAtivar;
      property Collection : String read FCollection write FCollection;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Mongo Components', [TMongoQuery]);
end;

constructor TMongoQuery.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

procedure TMongoQuery.setAtivar(const Value: boolean);
begin
  FAtivar := Value;
end;

function TMongoQuery.InserirLayout(Layout: TLayout) : Boolean;
var
  d : IBSONDocument;
  MongoDoc : TMongoDocument;
  i : Integer;
begin
  Result := True;
  d := nil;
  MongoDoc := TMongoDocument.Create;
  try
    try
      preencherMongoDoc(Layout, MongoDoc);
      MongoDoc.convertBSON(d);
      FMongoConexao.FMongoWire.Insert(FCollection, d);
    except
      Result := False;
    end;
  finally
    MongoDoc.Free;
  end;
end;

function TMongoQuery.UpdateLayout(Layout: TLayout) : Boolean;
var
  d, dChave : IBSONDocument;
  MongoDoc : TMongoDocument;
  i : Integer;
begin
  Result := True;
  d := nil;
  MongoDoc := TMongoDocument.Create;
  try
    try
      preencherMongoDoc(Layout, MongoDoc);
      MongoDoc.convertBSON(d);
      MongoDoc.convertCampoChave(dChave);
      FMongoConexao.FMongoWire.Update(FCollection, dChave, d);
    except
      Result := False;
    end;
  finally
    MongoDoc.Free;
  end;

end;

procedure TMongoQuery.preencherMongoDoc(Layout: TLayout; var MongoDoc: TMongoDocument);
var
  i : Integer;
begin
  for i:= 0 to Pred(Layout.ControlsCount) do
  begin
    if (Layout.Controls[i] is TEditMongo) then
    begin

      if TEditMongo(Layout.Controls[i]).CampoChave then
      begin
        MongoDoc.addCampoChave(TEditMongo(Layout.Controls[i]).MongoCampo,TEditMongo(Layout.Controls[i]).Text, TEditMongo(Layout.Controls[i]).MongoTipoCampo);
      end;

      case TEditMongo(Layout.Controls[i]).MongoTipoCampo of
        Texto :
          begin
            MongoDoc.addKey(TEditMongo(Layout.Controls[i]).MongoCampo, TEditMongo(Layout.Controls[i]).Text, Texto);
          end;
        Numerico :
          begin
            MongoDoc.addKey(TEditMongo(Layout.Controls[i]).MongoCampo, TEditMongo(Layout.Controls[i]).toNumerico, Numerico);
          end;
        Moeda :
          begin
            MongoDoc.addKey(TEditMongo(Layout.Controls[i]).MongoCampo, TEditMongo(Layout.Controls[i]).toMoeda, Moeda);
          end;
        DataHora :
          begin
            MongoDoc.addKey(TEditMongo(Layout.Controls[i]).MongoCampo, TEditMongo(Layout.Controls[i]).toDataHora, DataHora);
          end;
      end;
    end;
  end;
end;


end.
