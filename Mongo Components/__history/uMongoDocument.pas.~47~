unit uMongoDocument;

interface

uses
  System.SysUtils, System.Classes, mongoWire, bsonDoc, FMX.Forms,
  System.Generics.Collections, JSON, bsonUtils;

type
  TKeys = Record
    Key : String;
    Value : OleVariant;
  End;

type
  TDocument = Record
    Key : String;
    Values : TList<TKeys>;
  End;

type
  TMongoDocument = class
    private
      FKeys : TList<TKeys>;
      FDocuments : TList<TDocument>;
    public
      constructor Create;
      Destructor  Destroy;
      procedure addKey(Key : String; Value : OleVariant);
      procedure addDocument(Key : String; Values : TList<TKeys>);
      procedure convertBSON(var DOCBSON : IBSONDocument);
    published
      property Keys : TList<TKeys> read FKeys write FKeys;
      property Documents : TList<TDocument> read FDocuments write FDocuments;
  end;

implementation

constructor TMongoDocument.Create;
begin
  FKeys := TList<TKeys>.Create;
  FDocuments := TList<TDocument>.Create;
end;

destructor TMongoDocument.Destroy;
begin
  FKeys.Free;
  FDocuments.Free;
end;

procedure TMongoDocument.addKey(Key: string; Value: OleVariant);
var
  newKey : TKeys;
begin
  newKey.Key := Key;
  newKey.Value := Value;
  Keys.Add(newKey);
end;

procedure TMongoDocument.addDocument(Key: string; Values: TList<uMongoDocument.TKeys>);
var
  newDocument : TDocument;
begin
  newDocument.Key := Key;
  newDocument.Values := Values;
  FDocuments.Add(newDocument);
end;

procedure TMongoDocument.convertBSON(var DOCBSON : IBSONDocument);
var
   JA : Array of TJSONObject;
   I : Integer;
   K1, K2 : TKeys;
   Doc1, Doc2 : TDocument;
   doc : IBSONDocument;
begin
   SetLength(JA, Self.FDocuments.Count + 1);
   I := 1;
   JA[0] := TJSONObject.Create;
   try

    //Adicionando as K1
    for K1 in Self.FKeys do
    begin
      JA[0].AddPair(K1.Key, K1.Value);
    end;

    //Adicionando Objetos Embedados
    for Doc1 in Self.FDocuments do
    begin
      try
        JA[I] := TJSONObject.Create;
        for K2 in Doc1.Values do
        begin
          LL.Add('Chave:' + K2.Key + ' - Valor:' + K2.Value);
          JA[I].AddPair(K2.Key, K2.Value);
        end;
      finally
        JA[0].AddPair(Doc1.Key, JA[I]);
      end;
      I := I + 1;
    end;
     DOCBSON := JsonToBson(JA[0].ToString);
   finally
     JA[0].Free;
   end;
end;

end.
